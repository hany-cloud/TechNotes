Lessons learned
----------------
	Encapsulation: refers to preventing callers from changing the instance variables directly.
		This is done by making instance variables private and getters/setters public. 
	Immutability: refers to preventing callers from changing the instance variables at all. This uses several
		techniques, including removing setters with using private instance variables.
	JavaBeans: use methods beginning with isXXX for boolean property types and getXXX for non-boolean property types.
		While methods beginning with setXXX are used for setters.



	- Static imports are used to import static members.
			import static rope.Rope.*;

	- The order of initialization is the superclass; static variables and static initializers in the order they appear; 
      instance variables and instance initializers in the order they appear; 
	  and finally the constructor.
	  
	  Note: Static initialzers run once at first access of class' static memeber(s) or at first construction for the class 
			when creating new object. 										   
	  
	  Note: Instance initializers do not run and instance memebers do not declared as long as the class that they are accociated to
			is not yet constructed.
			
				import rope.*;
				import static rope.Rope.*;
				public class RopeSwing {
					private static Rope rope1 = new Rope();
					private static Rope rope2 = new Rope();
					{
						System.out.println(rope1.length); // will not run, Since RopeSwing is never constructed
					}
					public static void main(String[] args) {
						rope1.length = 2;
						rope2.length = 8;
						System.out.println(rope1.length); // you can use variable length without rope1 because of the import static
					}
				}
				package rope;
				public class Rope {
					public static int length = 0;
				}	
				
				
				Output: 8
			

	- Instance members are allowed to call static members, but static members are not allowed to call instance members.
		public class Test {
			private int a;
			public static void main(String... $n) {
				Temp t = new Temp(6);
				System.out.println(t.a); // accessing instance members even the private ones only through an object instance		
			}
			
			static void main1(String... $n) {
				System.out.println(new Temp().a); // OK
				a = 2; // compile error	
			}
			
			void main2(String... $n) {
				a = 2; // OK
			}
		}
	

	
	Member/Instance Variables (final, static, and static final)
	------------------------------------------------------------
	- final variable, if you intialized it at decalaration line, there is no way to re-intialized it again at any block of code.
					  but if you didn't intialize it, so you can intialize it in the constuctor(s).
		
		public class Temp {
			final int f;			
			public Temp() { f = 2; }
			public Temp(int var) { f = 3; }
		}
		
		As you can see in the above code you have to initialze the final variable in all constructors, 
		in case of you didn't intialize it at decalaration.
		===> One more thing, this is the only way to declare the final variable with multiple values.	
		
	- static final variable, still if you intialized it at decalaration line, there is no way to re-intialized it again at any block of code.	
							 but if you didn't intialize it, so you can intialize it only once in any one of the of the static blocks. 
							 you cannot initialze it in the constuctor(s).
		
		public class Temp {
			static final int f;			
			public Temp() { f = 2; } // compile error
			public Temp(int var) { f = 3; } // compile error
		}
	 
	- static variable, you can think of it as a regular member variable. you might be intialized it at decalaration line, 
					or at any where such as static block(s), instance initializer block(s), in the constuctor(s), or later at any method.
					And for sure if you didn't initialize it, it will use the default value depends on its type.
 
		public class Temp {
			static int f;			
			public Temp() { f = 2; } // OK
			public Temp(int var) { f = 3; } // OK
		}
   

	Local variables (final)
	-----------------------
	- final local variable, you have to initialize final local variables before the first use in the block of code.
							exactly like the regular local variables, the only difference is final local variables once 
							it's initialized you cannot re-initialized again.
			static { 
				final int f;
				System.out.println(f); // complie error
				
				int m;
				System.out.println(m); // complie error
			}

			{ 
				final int f;
				f = 1; // OK
				f = 2; // complie error 
				
				int m;
				m = 1; // OK
				m = 2; // OK
			}
	
	
	Constructors
	-------------
		  The default no-argument constructor is called when no constructor is coded. 
		  Multiple constructors are allowed and can call each other by writing this(). 
		  ===>>> If this() is present, it must be the first statement in the constructor.

		  You can create a method with the same name of the constructor name as follows: 
				public class Bird { void Bird() { } // but it's not recommended

	Methods
	--------
			- Java calls the most specific method it can find. Exact matches are preferred, followed by
              wider primitives. After that comes autoboxing and finally varargs.
			
			- Java uses pass-by-value, which means that calls to methods create a copy of the parameters.
			  Assigning new values to those parameters in the method doesn’t affect the caller’s variables.	  
			  Calling methods on objects that are method parameters changes the state of those objects and
			  is reflected in the caller, unless if you re-initialized it by new keyword in the method block.
			
			- Static methods very important fact:
				1: public class Rope {
				2: 	public static void swing() {
				3: 		System.out.print("swing ");
				4: 	}
				12: public static void main(String[] args) {
				13: 	Rope rope2 = null;
				14: 	rope2.swing();
				15: }	
				
				It does not throw a NullPointerException on line 14, because swing() is a static method. 
				Java looks at the type of the reference for rope2 and translates the call to Rope.play().		
	
			vararg (int... a)
			------------------
				- Two vararg => (int... a), parameters are not allowed in the same method.
						
						public static void main(String... $n) { } // OK, this main method is legal
						void m(int a, String... n) { } // OK, vararg should comes as last parameter in the method		
						void m(String... a, String... n) { } // compile error, only one vararg parameter is allowed
						
				- Java prefers autoboxing to varargs.
		
	Lambda
	-------
		- Lambda expressions, or lambdas, allow passing around blocks of code. 
		  The full syntax looks like 
				(String a, String b) -> { return a.equals(b); }. 
		  When only one parameter is specified, the parameter types can be omitted, and parentheses can also be omitted. 
				a -> { return a.equals(b); }. 							
		  The braces and return statement can be omitted for a single statement, making the short form 
		        (a -> a.equals(b))
				OR
				Or
				((a) -> a.equals(b))
		  Lambdas are passed to a method expecting an interface with one method. 
		  
		  Predicate is a common interface. It has one method named test
		  that returns a boolean and takes any type. And Autoboxing works for collections not inferring predicates.

		10: public static void main(String[] args) {
		11: 	// INSERT CODE HERE
		12: }
		13: private static boolean test(Predicate<Integer> p) {
		14: 	return p.test(5);
		15: }
		
		Which of the following lines can be inserted at line 11?
		A. System.out.println(test(i -> i == 5));						// OK
		B. System.out.println(test(i -> {i == 5;}));					// Complie Error, return is missing // System.out.println(test(i -> {return i == 5;}));
		C. System.out.println(test((i) -> i == 5));						// OK
		D. System.out.println(test((int i) -> i == 5));					// Complie Error, Integer is expecting, Autoboxing not working here 
		E. System.out.println(test((int i) -> {return i == 5;}));		// Complie Error, Integer is expecting, Autoboxing not working here 
		F. System.out.println(test((i) -> {return i == 5;}));			// OK	
		  
		  
		 Note: The removeIf() method on ArrayList takes a Predicate.

		How can Lambda expression replacing functional interface???
		------------------------------------------------------------
			@FunctionalInterface
			interface Secret {
				String magic(double d);
			}
			
			public class Temp {
				public static void main(String[] args) {
					Secret s = d -> "Hany";
					System.out.println(s.magic(1.2));
				}
			}
			
			OR 
			
			interface Climb {
				boolean isTooHigh(int height, int limit);
			}
			.
			.
			.
			public static void main(String[] args) {
				check((h, l)->h+l>100, 50);
			}

			private static void check(Climb climb, int height) {
				if (climb.isTooHigh(height, 10))
					System.out.println("too high");
				else
					System.out.println("ok");
			}	
			
==========================================================================================================
==========================================================================================================
==========================================================================================================

1. Which of the following can fill in the blank in this code to make it compile? (Choose all
	that apply)
	public class Ant {
		_____ void method() { }
	}
	A. default
	B. final
	C. private
	D. Public
	E. String
	F. zzz:

1. B, C, (D is not correct because Public starts by capital letter) 	
------------------------------------------------------------------------------------
2. Which of the following compile? (Choose all that apply)
	A. final static void method4() { }
	B. public final int void method() { }
	C. private void int method() { }
	D. static final void method3() { }
	E. void final method() {}
	F. void public method() { }
	
2. A, D 
------------------------------------------------------------------------------------
3. Which of the following methods compile? (Choose all that apply)
	A. public void methodA() { return;}
	B. public void methodB() { return null;}
	C. public void methodD() {}
	D. public int methodD() { return 9;}
	E. public int methodE() { return 9.0;}
	F. public int methodF() { return;}
	G. public int methodG() { return null;}
	
3. A, C, D 
------------------------------------------------------------------------------------
4. Which of the following compile? (Choose all that apply)
	A. public void moreA(int... nums) {}
	B. public void moreB(String values, int... nums) {}
	C. public void moreC(int... nums, String values) {}
	D. public void moreD(String... values, int... nums) {}
	E. public void moreE(String[] values, ...int nums) {}
	F. public void moreF(String... values, int[] nums) {}
	G. public void moreG(String[] values, int[] nums) {}

4. A, B, G 
------------------------------------------------------------------------------------
***5. Given the following method, which of the method calls return 2? (Choose all that apply)
	public int howMany(boolean b, boolean... b2) {
		return b2.length;
	}
	A. howMany();
	B. howMany(true);
	C. howMany(true, true);
	D. howMany(true, true, true);
	E. howMany(true, {true});
	F. howMany(true, {true, true});
	G. howMany(true, new boolean[2]);
	
5. D, G. 
Option D passes the initial parameter plus two more to turn into a vararg array
of size 2. 
Option G passes the initial parameter plus an array of size 2. 
Option A does not compile because it does not pass the initial parameter. 
Options E and F do not compile because they do not declare an array properly. It should be new boolean[]{true}. 
Option B creates a vararg array of size 0 
Option C creates a vararg array of size 1.
------------------------------------------------------------------------------------
6. Which of the following are true? (Choose all that apply)
	A. Package private access is more lenient than protected access.
	B. A public class that has private fields and package private methods is not visible to
	   classes outside the package.
	C. You can use access modifiers so only some of the classes in a package see a particular
	   package private class.
	D. You can use access modifiers to allow read access to all methods, but not any instance
	   variables.
	E. You can use access modifiers to restrict read access to all classes that begin with the
	   word Test.
	   
6. D
------------------------------------------------------------------------------------
***7. Given the following my.school.ClassRoom and my.city.School class definitions, which
	line numbers in main() generate a compiler error? (Choose all that apply)
	1: package my.school;
	2: public class Classroom {
	3: 	private int roomNumber;
	4: 	protected String teacherName;
	5: 	static int globalKey = 54321;
	6: 	public int floor = 3;
	7: 	Classroom(int r, String t) {
	8: 		roomNumber = r;
	9: 		teacherName = t; } }

	1: package my.city;
	2: import my.school.*;
	3: public class School {
	4: 	public static void main(String[] args) {
	5: 		System.out.println(Classroom.globalKey);
	6: 		Classroom room = new Classroom(101, ""Mrs. Anderson");
	7: 		System.out.println(room.roomNumber);
	8: 		System.out.println(room.floor);
	9: 		System.out.println(room.teacherName); } }
	A. None, the code compiles fine.
	B. Line 5
	C. Line 6
	D. Line 7
	E. Line 8
	F. Line 9

7. B, C(""Mrs. Anderson", as well as the access modifier for Classroom constructor is default), D, F
------------------------------------------------------------------------------------
***8. Which of the following are true? (Choose all that apply)
	A. Encapsulation uses package private instance variables.
	B. Encapsulation uses private instance variables.
	C. Encapsulation allows setters.
	D. Immutability uses package private instance variables.
	E. Immutability uses private instance variables.
	F. Immutability allows setters.
	
8. B, C, E 	
Encapsulation requires using methods to get and set instance variables so
other classes are not directly using them. Instance variables must be private for this
to work. 
Immutability takes this a step further, allowing only getters, so the instance
variables do not change state.
------------------------------------------------------------------------------------
9. Which are methods using JavaBeans naming conventions for accessors and mutators?
	(Choose all that apply)
	A. public boolean getCanSwim() { return canSwim;}
	B. public boolean canSwim() { return numberWings;}
	C. public int getNumWings() { return numberWings;}
	D. public int numWings() { return numberWings;}
	E. public void setCanSwim(boolean b) { canSwim = b;}
	
9. C, E
------------------------------------------------------------------------------------
***10. What is the output of the following code?
	1: package rope;
	2: public class Rope {
	3: 	public static int LENGTH = 5;
	4: 	static {
	5: 		LENGTH = 10;
	6: 	}
	7: 	public static void swing() {
	8: 		System.out.print("swing ");
	9: 	}
	10: }

	1: import rope.*;
	2: import static rope.Rope.*;
	3: public class Chimp {
	4: 	public static void main(String[] args) {
	5: 		Rope.swing();
	6: 		new Rope().swing();
	7: 		System.out.println(LENGTH);
	8: 	}
	9: }
	A. swing swing 5
	B. swing swing 10
	C. Compiler error on line 2 of Chimp.
	D. Compiler error on line 5 of Chimp.
	E. Compiler error on line 6 of Chimp.
	F. Compiler error on line 7 of Chimp.
	
10. B
------------------------------------------------------------------------------------
***11. Which are true of the following code? (Choose all that apply)
	1: public class Rope {
	2: 	public static void swing() {
	3: 		System.out.print("swing ");
	4: 	}
	5: 	public void climb() {
	6: 		System.out.println("climb ");
	7: 	}
	8: 	public static void play() {
	9: 		swing();
	10: 	climb();
	11: }
	12: public static void main(String[] args) {
	13: 	Rope rope = new Rope();
	14: 	rope.play();
	15: 	Rope rope2 = null;
	16: 	rope2.play();
	17: }
	18: }
	A. The code compiles as is.
	B. There is exactly one compiler error in the code.
	C. There are exactly two compiler errors in the code.
	D. If the lines with compiler errors are removed, the output is climb climb.
	E. If the lines with compiler errors are removed, the output is swing swing.
	F. If the lines with compile errors are removed, the code throws a NullPointerException.

11. B, E
------------------------------------------------------------------------------------
***12. What is the output of the following code?
	import rope.*;
	import static rope.Rope.*;
	public class RopeSwing {
		private static Rope rope1 = new Rope();
		private static Rope rope2 = new Rope();
		{
			System.out.println(rope1.length);
		}
		public static void main(String[] args) {
			rope1.length = 2;
			rope2.length = 8;
			System.out.println(rope1.length);
		}
	}
	package rope;
	public class Rope {
		public static int length = 0;
	}
	A. 02
	B. 08
	C. 2
	D. 8
	E. The code does not compile.
	F. An exception is thrown.

12. B
D. There are two details to notice in this code. First, note that RopeSwing has an
instance initializer and not a static initializer. Since RopeSwing is never constructed,
the instance initializer does not run. The other detail is that length is static. Changes
from one object update this common static variable.
------------------------------------------------------------------------------------
***13. How many compiler errors are in the following code?
	1: public class RopeSwing {
	2: 	private static final String leftRope;
	3: 	private static final String rightRope;
	4: 	private static final String bench;
	5: 	private static final String name = "name";
	6: 	static {
	7: 		leftRope = "left";
	8: 		rightRope = "right";
	9: 	}
	10: static {
	11: 	name = "name";
	12: 	rightRope = "right";
	13: }
	14: public static void main(String[] args) {
	15: 	bench = "bench";
	16: }
	17: }
	A. 0
	B. 1
	C. 2
	D. 3
	E. 4
	F. 5 

13. E	
		name = "name";
		rightRope = "right"; 
	in the second static initializer block gives cannot reassigned compile errors
------------------------------------------------------------------------------------
***14. Which of the following can replace line 2 to make this code compile? (Choose
	all that apply)
	1: import java.util.*;
	2: // INSERT CODE HERE
	3: public class Imports {
	4: 	public void method(ArrayList<String> list) {
	5: 		sort(list);
	6: 	}
	7: }
	A. import static java.util.Collections;
	B. import static java.util.Collections.*;
	C. import static java.util.Collections.sort(ArrayList<String>);
	D. static import java.util.Collections;
	E. static import java.util.Collections.*;
	F. static import java.util.Collections.sort(ArrayList<String>);
	
14. B
------------------------------------------------------------------------------------
***15. What is the result of the following statements?
	1: public class Test {
	2: 	public void print(byte x) {
	3: 		System.out.print("byte");
	4: 	}
	5: 	public void print(int x) {
	6: 		System.out.print("int");
	7: 	}
	8: 	public void print(float x) {
	9: 		System.out.print("float");
	10: }
	11: public void print(Object x) {
	12: 	System.out.print("Object");
	13: }
	14: public static void main(String[] args) {
	15: 	Test t = new Test();
	16: 	short s = 123;
	17: 	t.print(s);
	18: 	t.print(true);
	19: 	t.print(6.789);
	20: }
	21: }
	A. bytefloatObject
	B. intfloatObject
	C. byteObjectfloat
	D. intObjectfloat
	E. intObjectObject
	F. byteObjectObject

intObjectObject	
15. E
------------------------------------------------------------------------------------
16. What is the result of the following program?
	1: public class Squares {
	2: 	public static long square(int x) {
	3: 		long y = x * (long) x;
	4: 		x = -1;
	5: 		return y;
	6: 	}
	7: 	public static void main(String[] args) {
	8: 		int value = 9;
	9: 		long result = square(value);
	10: 	System.out.println(value);
	11: } }
	A. -1
	B. 9
	C. 81
	D. Compiler error on line 9.
	E. Compiler error on a different line.
	
16. B
------------------------------------------------------------------------------------	
17. Which of the following are output by the following code? (Choose all that apply)
	public class StringBuilders {
		public static StringBuilder work(StringBuilder a, StringBuilder b) {
			a = new StringBuilder("a");
			b.append("b");
			return a;
		}
		public static void main(String[] args) {
			StringBuilder s1 = new StringBuilder("s1");
			StringBuilder s2 = new StringBuilder("s2");
			StringBuilder s3 = work(s1, s2);
			System.out.println("s1 = " + s1);
			System.out.println("s2 = " + s2);
			System.out.println("s3 = " + s3);
		}
	}
	A. s1 = a
	B. s1 = s1
	C. s2 = s2
	D. s2 = s2b
	E. s3 = a
	F. s3 = null
	G. The code does not compile.

17. B, D, E
------------------------------------------------------------------------------------
18. Which of the following are true? (Choose 2)
	A. this() can be called from anywhere in a constructor.
	B. this() can be called from any instance method in the class.
	C. this.variableName can be called from any instance method in the class.
	D. this.variableName can be called from any static method in the class.
	E. You must include a default constructor in the code if the compiler does not include one.
	F. You can call the default constructor written by the compiler using this().
	G. You can access a private constructor with the main() method.
	
18. C, G
------------------------------------------------------------------------------------	
19. Which of these classes compile and use a default constructor? (Choose all that apply)
	A. public class Bird { }
	B. public class Bird { public bird() {} }
	C. public class Bird { public bird(String name) {} }
	D. public class Bird { public Bird() {} }
	E. public class Bird { Bird(String name) {} }
	F. public class Bird { private Bird(int age) {} }
	G. public class Bird { void Bird() { }
	
19. A, G	
------------------------------------------------------------------------------------
20. Which code can be inserted to have the code print 2?
	public class BirdSeed {
		private int numberBags;
		boolean call;
		public BirdSeed() {
			// LINE 1
			call = false;
			// LINE 2
		}
		public BirdSeed(int numberBags) {
			this.numberBags = numberBags;
		}
		public static void main(String[] args) {
			BirdSeed seed = new BirdSeed();
			System.out.println(seed.numberBags);
	} }
	A. Replace line 1 with BirdSeed(2);
	B. Replace line 2 with BirdSeed(2);
	C. Replace line 1 with new BirdSeed(2);
	D. Replace line 2 with new BirdSeed(2);
	E. Replace line 1 with this(2);
	F. Replace line 2 with this(2);

20. E
------------------------------------------------------------------------------------
21. Which of the following complete the constructor so that this code prints out 50? (Choose
	all that apply)
	public class Cheetah {
		int numSpots;
		public Cheetah(int numSpots) {
			// INSERT CODE HERE
		}
		public static void main(String[] args) {
			System.out.println(new Cheetah(50).numSpots);
		}
	}
	A. numSpots = numSpots;
	B. numSpots = this.numSpots;
	C. this.numSpots = numSpots;
	D. numSpots = super.numSpots;
	E. super.numSpots = numSpots;
	F. None of the above.
	
21. C
------------------------------------------------------------------------------------
***22. What is the result of the following?
	1: public class Order {
	2: 	static String result = "";
	3: 	{ result += "c"; }
	4: 	static
	5: 		{ result += "u"; }
	6: 	{ result += "r"; }
	7: }
	1: public class OrderDriver {
	2: 	public static void main(String[] args) {
	3: 		System.out.print(Order.result + " ");
	4: 		System.out.print(Order.result + " ");
	5: 		new Order();
	6: 		new Order();
	7: 		System.out.print(Order.result + " ");
	8: 	}
	9: }
	A. curur
	B. ucrcr
	C. u ucrcr
	D. u u curcur
	E. u u ucrcr
	F. ur ur urc
	G. The code does not compile.
	
result u => ucr => ucrcr
print u u ucrcr	
Static initialzer runs once at line 3 => first call could be the access of class static memeber as in our case,
										 or at creating the first new object from the class
22. E
------------------------------------------------------------------------------------
***23. What is the result of the following?
	1: public class Order {
	2: 	String value = "t";
	3: 	{ value += "a"; }
	4: 	{ value += "c"; }
	5: 	public Order() {
	6: 		value += "b";
	7: 	}
	8: 	public Order(String s) {
	9: 		value += s;
	10: }
	11: public static void main(String[] args) {
	12: 	Order order = new Order("f");
	13: 	order = new Order();
	14: 	System.out.println(order.value);
	15: } }
	A. tacb
	B. tacf
	C. tacbf
	D. tacfb
	E. tacftacb
	F. The code does not compile.
	G. An exception is thrown.

value => t => tacf
	  => t => tacb
23. A	
------------------------------------------------------------------------------------
24. Which of the following will compile when inserted in the following code? (Choose
	all that apply)
	public class Order3 {
		final String value1 = "1";
		static String value2 = "2";
		String value3 = "3";
		{
		// CODE SNIPPET 1
		}
		static {
		// CODE SNIPPET 2
		}
	}
	A. value1 = "d"; instead of // CODE SNIPPET 1
	B. value2 = "e"; instead of // CODE SNIPPET 1
	C. value3 = "f"; instead of // CODE SNIPPET 1
	D. value1 = "g"; instead of // CODE SNIPPET 2
	E. value2 = "h"; instead of // CODE SNIPPET 2
	F. value3 = "i"; instead of // CODE SNIPPET 2
	
24. B, C, E
------------------------------------------------------------------------------------
25. Which of the following are true about the following code? (Choose all that apply)
	public class Create {
		Create() {
			System.out.print("1 ");
		}
		Create(int num) {
			System.out.print("2 ");
		}
		Create(Integer num) {
			System.out.print("3 ");
		}
		Create(Object num) {
			System.out.print("4 ");
		}
		Create(int... nums) {
			System.out.print("5 ");
		}
		public static void main(String[] args) {
			new Create(100);
			new Create(1000L);
		}
	}
	A. The code prints out 2 4.
	B. The code prints out 3 4.
	C. The code prints out 4 2.
	D. The code prints out 4 4.
	E. The code prints 3 4 if you remove the constructor Create(int num).
	F. The code prints 4 4 if you remove the constructor Create(int num).
	G. The code prints 5 4 if you remove the constructor Create(int num).

25. A, E
------------------------------------------------------------------------------------
26. What is the result of the following class?
	1: import java.util.function.*;
	2:
	3: public class Panda {
	4: 	int age;
	5: 	public static void main(String[] args) {
	6: 		Panda p1 = new Panda();
	7: 		p1.age = 1;
	8: 		check(p1, p -> p.age < 5);
	9: 	}
	10: private static void check(Panda panda, Predicate<Panda> pred) {
	11: 	String result = pred.test(panda) ? "match" : "not match";
	12: 	System.out.print(result);
	13: } }
	A. match
	B. not match
	C. Compiler error on line 8.
	D. Compiler error on line 10.
	E. Compiler error on line 11.
	F. A runtime exception is thrown. 	
	
26.	A
------------------------------------------------------------------------------------
***27. What is the result of the following code?
	1: interface Climb {
	2: 	boolean isTooHigh(int height, int limit);
	3: }
	4:
	5: public class Climber {
	6: 	public static void main(String[] args) {
	7: 		check((h, l) -> h.append(l).isEmpty(), 5);
	8: }
	9: private static void check(Climb climb, int height) {
	10: if (climb.isTooHigh(height, 10))
	11: 	System.out.println("too high");
	12: else
	13: 	System.out.println("ok");
	14: }
	15: }
	A. ok
	B. too high
	C. Compiler error on line 7.
	D. Compiler error on line 10.
	E. Compiler error on a different line.
	F. A runtime exception is thrown.

27. C
------------------------------------------------------------------------------------
***28. Which of the following lambda expressions can fill in the blank? (Choose all that apply)
	List<String> list = new ArrayList<>();
	list.removeIf(___________________);
	A. s -> s.isEmpty()
	B. s -> {s.isEmpty()}
	C. s -> {s.isEmpty();}
	D. s -> {return s.isEmpty();}
	E. String s -> s.isEmpty()
	F. (String s) -> s.isEmpty()
	
28. A, *C (Options B and C are incorrect because they do not use the return keyword), *D, F
------------------------------------------------------------------------------------
***29. Which lambda can replace the MySecret class to return the same value? (Choose
	all that apply)
	interface Secret {
		String magic(double d);
	}
	class MySecret implements Secret {
		public String magic(double d) {
			return "Poof";
		}
	}
	A. caller((e) -> "Poof");
	B. caller((e) -> {"Poof"});
	C. caller((e) -> { String e = ""; "Poof" });
	D. caller((e) -> { String e = ""; return "Poof"; });
	E. caller((e) -> { String e = ""; return "Poof" });
	F. caller((e) -> { String f = ""; return "Poof"; });

29. F
A, F. Option B is incorrect because it does not use the return keyword. Options C, D,
and E are incorrect because the variable e is already in use from the lambda and cannot
be redefined. Additionally, option C is missing the return keyword and option E is
missing the semicolon.